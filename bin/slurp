#!/usr/bin/env ruby

# Slurps stories from the given file (stories.slurper by default) and creates
# Pivotal Tracker stories from them. Useful during story carding sessions
# when you want to capture a number of stories quickly without clicking
# your way through the Tracker UI.

# Default story values and API token information should be provided in a
# ~/.slurper.yml file.

# Note that if you include labels in stories.slurper, they don't appear
# immediately in Tracker. You'll have to refresh Tracker after a few seconds
# to see them.

$:.unshift(File.join(File.dirname(File.dirname(__FILE__)),'lib'))
require 'rubygems'
require 'slurper'
require 'optparse'
require 'jira'
require 'pivotal'

options = {:config_file => 'slurper_config.yml', :filter => ''}

OptionParser.new do |opts|
  opts.on('-r', '--reverse', 'Reverse story creation order') do |v|
    options[:reverse] = v
  end

  opts.on('-c', '--config_file [PATH]', 'Tracker configuration file') do |v|
    options[:config_file] = v
  end

  opts.on('-d', '--dump', 'Dump stories from the tracker') do |v|
    options[:dump] = v
  end

  opts.on('-f', '--dump-filter [FILTER_STRING]', 'Dump filter (specific for each tracker)') do |v|
    options[:filter] = v
  end
end.parse!

story_file = ARGV.empty? ? "stories.slurper" : ARGV[0]

handlers = [Jira::Handler.new, Pivotal.new]

raise "Stories file not found: '#{story_file}'" unless File::exists? story_file
raise "Config file not found: '#{options[:config_file]}'" unless File::exists? options[:config_file]

if options[:dump]
  Slurper.dump(options[:config_file], options[:filter], handlers, options[:reverse])
else
  Slurper.slurp(story_file, options[:config_file], handlers, options[:reverse])
end
